#include<stdio.h>
#include<Windows.h>
#include<time.h>
#include<math.h>
#include<conio.h>

#define SIZE 9 //定义地图大小
#define MAX_POS SIZE*SIZE//地图点数
#define MAX_LENGTH SIZE*SIZE //定义蛇的最大长度

typedef struct point //地图上的点的节点
{
	int r;
	int c;
} point;
typedef struct flag_map_struct
{
    point prior;
    int visited;
    int distance;
    int ok;
    int owndir;
}flag_map_s;


HANDLE stdOutput; //声明windows标准输出句柄

void init(int * length, point * foodAt, int * dir, point body[], char map[][SIZE]); //初始化
int getDir(int dir); //获取蛇的行进方向
int getAIDir(int dir, int length, point body[], point foodAt); //获取AI判断得出的行进方向
int moveable(point moveTo, int length, point body[]);
int move(point foodAt, int dir, int length, point body[]); //蛇的运动
void draw(int length, point foodAt, point body[], char map[][SIZE]); //画图
void food(point * foodAt, point body[], int length, char map[][SIZE]); //生成食物
int main()
{
	char map[SIZE][SIZE]; //定义地图
	point body[MAX_LENGTH], foodAt,path[MAX_LENGTH]; //整个蛇身体和食物的所在点（body数组的第一个值为蛇头）
	int length; //蛇的实际长度
	int dir; //行进方向
	int rate = 1; //行进速率
	int result; //保存蛇运动的结果：【死亡】、【得分】、【无】
	init(&length, &foodAt, &dir, body, map); //初始化

while (1)
	{
		Sleep(500 / rate);
		//dir = getDir(dir); //获取蛇的行进方向
		//dir = getAIDir(dir, length, body, foodAt); //获取AI判断得出的行进方向
		dir=get_dir_of_a_smart_snake(body[0],foodAt,path,length,body,map);
		//get_dir_of_a_smart_snake(point start,point desti,point path[MAX_LENGTH],int length,point body[],char map[SIZE][SIZE])
		if(dir!=-1){
            result = move(foodAt, dir, length, body); //蛇的运动
		}
		else {
            result=-1;
		}
		if (result == 1) //如果吃到食物
		{
			length++;
			rate = length / 3;
			if (length == MAX_LENGTH)
			{
				printf("您已通关！");
				break;
			}
			food(&foodAt, body, length, map); //生成食物
		}
		draw(length, foodAt, body, map); //画图
		if (result == -1) //如果死亡
		{
			break;
		}

	}
	Sleep(500);
	//printf("此次得分为%d\n", (length - 3) * 100);

	system("pause");


}
void init(int * length, point * foodAt, int * dir, point body[], char map[][SIZE]) //初始化
{
	memset(map, '*', SIZE * SIZE); //初始化地图
/*	body[0].r = 1, body[0].c = 3; //初始化蛇的身体
	body[1].r = 1, body[1].c = 2;
	body[2].r = 1, body[2].c = 1;
	*length = 3; //初始长度为3
	*dir = 1; //初始方向向右*/

	body[0].r = 8, body[0].c = 5; //初始化蛇的身体
	body[1].r = 8, body[1].c = 6;
	body[2].r = 7, body[2].c =6;
	body[3].r = 7, body[3].c=7;
	body[4].r = 7, body[4].c=8;
	body[5].r = 8, body[5].c=8;

	*length = 6; //初始长度为3
	*dir = 1; //初始方向向


	food(foodAt, body, *length, map); //生成食物

	//foodAt->r=8,foodAt->c=7;//

	draw(*length, *foodAt, body, map); //画图
	printf(" 按下任意键开始，用ASDW控制方向，玩家模式ESC暂停\n");
	_getch();
	srand((unsigned)time(NULL)); //生成随机数种子，备用
	stdOutput = GetStdHandle(STD_OUTPUT_HANDLE); //获取标准输出句柄
	CONSOLE_CURSOR_INFO cci;
	cci.bVisible = 0;
	cci.dwSize = 1;
	SetConsoleCursorInfo(stdOutput, &cci);
	COORD coord = { 0, SIZE * 2 + 3 };


}

/*void debugger()
{
    	int k,i;
  point pat[MAX_LENGTH];


    if(exist_path(body[0],foodAt,length,body)==1)
        printf("exist_path works!\n");
    else if(exist_path(body[0],foodAt,length,body)==0){
        printf("exist_path error!\n");
    }

 k=shortest_path(body[0],foodAt,pat,length,body,map);
    i=0;
    for(i=0;i<=k;i++){
        printf("@1 r:%d ,c:%d\n",pat[i].r,pat[i].c);

    }

   k=smart_snake_path(body[0],foodAt,pat,length,body,map,foodAt);
    for(i=0;i<=k;i++){
        printf("#2 r:%d ,c:%d\n",pat[i].r,pat[i].c);

    }
}
*/


int getDir(int dir) //获取蛇的行进方向，规定返回值0代表向上，1代表向右，2代表向下，3代表向左
{
	char key;
	int newDir = dir;
	if (_kbhit())
	{
		key = _getch();
		switch (key)
		{
		case 'A': case 'a': newDir = 3; break;
		case 'S': case 's': newDir = 2; break;
		case 'D': case 'd': newDir = 1; break;
		case 'W': case 'w': newDir = 0; break;
		case 27: _getch(); break;
		}
	}
	if (newDir - dir == 2 || newDir - dir == -2) //蛇不能反向
	{
		newDir = dir;
	}
	return newDir;
}
int getAIDir(int dir, int length, point body[], point foodAt) //获取AI判断得出的行进方向
{
	int i, newDir = 0, distanceToFood;
	point moveTo;
	int dir_weight[4]; //上、右、下、左四个方向的权值
	distanceToFood = abs(body[0].r - foodAt.r) + abs(body[0].c - foodAt.c);
	for (i = 0; i < 4; i++)
	{
		if (abs(dir - i == 2)) //蛇不能反向
		{
			dir_weight[i] = -1; //权值取最小
		}
		else
		{
			switch (i)
			{
			case 0: moveTo.r = body[0].r - 1, moveTo.c = body[0].c; break;
			case 1: moveTo.r = body[0].r, moveTo.c = body[0].c + 1; break;
			case 2: moveTo.r = body[0].r + 1, moveTo.c = body[0].c; break;
			case 3: moveTo.r = body[0].r, moveTo.c = body[0].c - 1; break;
			}
			if (!moveable(moveTo, length, body)) //如果移动会死亡
			{
				dir_weight[i] = 0; //权值取0
			}
			else
			{
				if (distanceToFood > abs(moveTo.r - foodAt.r) + abs(moveTo.c - foodAt.c)) //如果移动后到食物的距离减少
				{
					dir_weight[i] = 2; //权值取2
				}
				else
				{
					dir_weight[i] = 1; //权值取1
				}
			}
		}
	}

	for (i = 1; i < 4; i++) //取权值最大的方向
	{
		if (dir_weight[i] > dir_weight[newDir])
		{
			newDir = i;
		}
	}
	return newDir;
}
int moveable(point moveTo, int length, point body[]) //判断是否可以移动到moveTo点，能1，不能0
{
	int i;
	for (i = 0; i < length ; i++)
	{
		if (moveTo.r == body[i].r && moveTo.c == body[i].c)
		{
			return 0;
		}
	}
	if (moveTo.r < 0 || moveTo.r >= SIZE || moveTo.c < 0 || moveTo.c >= SIZE) //如果超出边界
	{
		return 0;
	}
	return 1;
}
int move(point foodAt, int dir, int length, point body[]) //蛇的运动，规定返回值-1代表死亡，0代表没有吃到食物，1代表吃到食物
{
	int i, flag = 0;
	point head = body[0];
	switch (dir)
	{
	case 0: head.r -= 1; break;//上
	case 1: head.c += 1; break;//右
	case 2: head.r += 1; break;//下
	case 3: head.c -= 1; break;//左
	}
	if (head.r < 0 || head.r >= SIZE || head.c < 0 || head.c >= SIZE) //出界了死亡
	{
		return -1;
	}
	for (i = 0; i < length - 1; i++)
	{
		if (head.r == body[i].r && head.c == body[i].c) //咬到了自己死亡
		{
			return -1;
		}
	}
	if (head.r == foodAt.r && head.c == foodAt.c) //吃到了食物
	{
		length++;
		flag = 1; //标记一下，便与等下返回值为1
	}
	for (i = length - 1; i > 0; i--) //移动蛇的位置
	{
		body[i] = body[i - 1];
	}
	body[0] = head; //头部移动
	if (flag == 1)
	{
		return 1;
	}
	return 0;
}
void draw(int length, point foodAt, point body[], char map[][SIZE]) //画图
{

	static char bitmap[SIZE + 2][SIZE + 2]; //定义一个数组，用于把地图背景、边界、蛇、食物都画上去
	int i, j;
	for (i = 0; i < SIZE; i++) //背景
	{
		for (j = 0; j < SIZE; j++)
		{
			bitmap[i + 1][j + 1] = map[i][j];
		}
	}
	//边框
	bitmap[0][0] = '0', bitmap[0][SIZE + 1] = '1';
	bitmap[SIZE + 1][0] = '2', bitmap[SIZE + 1][SIZE + 1] = '3';
	for (i = 0; i < SIZE; i++)
	{
		bitmap[0][i + 1] = '4', bitmap[SIZE + 1][i + 1] = '4';
		bitmap[i + 1][0] = '5', bitmap[i + 1][SIZE + 1] = '5';
	}

	bitmap[foodAt.r + 1][foodAt.c + 1] = 'f'; //食物
	bitmap[body[0].r + 1][body[0].c + 1] = 'h'; //蛇头
	for (i=1;i<length;i++) //蛇身
	{
		bitmap[body[i].r + 1][body[i].c + 1] = 'b';
	}
	COORD coord = { 0, 0 }; //座标0，0
	SetConsoleCursorPosition(stdOutput, coord); //把光标设置到0，0位置
	for (i = 0; i < SIZE + 2; i++)
	{
		for (j = 0; j < SIZE + 2; j++)
		{
			switch (bitmap[i][j])
			{
			case 'f': printf("★"); break;
			case 'b': printf("●"); break;
			case 'h': printf("○"); break;
			case '0': printf("┏"); break;
			case '1': printf("━┓"); break;
			case '2': printf("┗"); break;
			case '3': printf("━┛"); break;
			case '4': printf(" ━"); break;
			case '5': printf("┃ "); break;
			default: printf("  ");//▓
			}
		}
		printf("\n");
	}
	printf("得分:%d\n", (length - 3) * 100);
}
void food(point * foodAt, point body[], int length, char map[][SIZE]) //生成食物
{
	int i;
	while (1)
	{
		foodAt->r = rand() % SIZE, foodAt->c = rand() % SIZE; //随机生成食物位置
		for (i = 0; i < length; i++)
		{

			if (foodAt->r == body[i].r && foodAt->c == body[i].c) //如果该位置在蛇的身体上
			{
				goto retry;
			}
		}
		break;
	retry:;
	}
}

/*int path_search(point start,point desti,int shortest_path[MAX_LENGTH],int sh_flag,int longest_path[MAX_LENGTH],int lo_flag)
{
    point tmp;
    point queue[]
}*/

int exist_path(point start,point desti,int length,point body[])
{
    point tmp,up,down,left,right;
    point queue[MAX_LENGTH+2];
    int he_flag=0,tail_flag=0,i,j;
    int visited_map[SIZE][SIZE]={{0}};//记录是否已经遍历过
    visited_map[start.r][start.c]=1;
    queue[tail_flag]=start;
    tail_flag+=1;
    while(he_flag!=tail_flag){//从start可到达点全部遍历完后结束
        tmp=queue[he_flag];
        he_flag=(he_flag+1)%(MAX_LENGTH+2);
        up=down=left=right=tmp;

/* //debug专用部分
printf("一次\n");
        printf("S:  r:%d  c:%d \n",tmp.r,tmp.c);
      //  printf("visited:%d\n",visited_map[start.r][start.c]);
      printf("--------------------\n");
        for(i=he_flag;i<tail_flag;i++){

            printf("(%d,%d)    ",queue[i].r,queue[i].c);

        }
        printf("--------------------\n\n");到此结束*/

        if(up.r-1>=0){
            up.r-=1;
        }
        if(down.r+1<SIZE){
            down.r+=1;
        }
        if(left.c-1>=0){
            left.c-=1;
        }
        if(right.c+1<SIZE){
            right.c+=1;
        }
        //分别遍历上下左右四个点
        if(moveable(up,length,body)==1&&visited_map[up.r][up.c]==0){//如果是墙/身体/已经遍历过 则不再遍历
            queue[tail_flag]=up;
            visited_map[up.r][up.c]=1;
            tail_flag=(tail_flag+1)%(MAX_LENGTH+2);


           // printf("UP:  r:%d  c:%d \n",up.r,up.r);

        }

        if(moveable(down,length,body)==1&&visited_map[down.r][down.c]==0){
            queue[tail_flag]=down;
            tail_flag=(tail_flag+1)%(MAX_LENGTH+2);
            visited_map[down.r][down.c]=1;

            // printf("DOWN:  r:%d  c:%d \n",down.r,down.r);

        }

        if(moveable(left,length,body)==1&&visited_map[left.r][left.c]==0){
            queue[tail_flag]=left;
            tail_flag=(tail_flag+1)%(MAX_LENGTH+2);
            visited_map[left.r][left.c]=1;

           //  printf("LEFT:  r:%d  c:%d \n",left.r,left.r);

        }

        if(moveable(right,length,body)==1&&visited_map[right.r][right.c]==0){
            queue[tail_flag]=right;
            tail_flag=(tail_flag+1)%(MAX_LENGTH+2);
            visited_map[right.r][right.c]=1;

           //  printf("RIGHT:  r:%d  c:%d \n",right.r,right.r);

        }


        //遍历到了目的点，则返回1
        if(up.r==desti.r&&up.c==desti.c)return 1;
        if(down.r==desti.r&&down.c==desti.c)return 1;
        if(left.r==desti.r&&left.c==desti.c)return 1;
        if(right.r==desti.r&&right.c==desti.c)return 1;
    }
    //无法到达目的点，返回0
    return 0;
}

int shortest_path(point start,point desti,point shortest_path[MAX_LENGTH],int length,point body[],char map[SIZE][SIZE])
{
    flag_map_s flag_map[SIZE][SIZE];//在寻路过程中用于 标记前置节点、是否访问过、到达此处的距离、是否是可以移动的位置、移动至此处的方向
    int i,j;
    point tmp,TMP,up,down,left,right;
    point queue[MAX_POS+2];//遍历中的队列
    int head_flag=0,tail_flag=0;
    tmp.c=-1;
    tmp.r=-1;
    //初始化
    for(i=0;i<SIZE;i++){
        for(j=0;j<SIZE;j++){
            flag_map[i][j].prior=tmp;
            flag_map[i][j].visited=0;
            flag_map[i][j].owndir=-1;
            TMP.r=i,TMP.c=j;
            if(moveable(TMP,length,body)==1){
                flag_map[i][j].ok=1;
            }
            else {
                flag_map[i][j].ok=0;
            }
        }
    }
    flag_map[start.r][start.c].distance=0;
    flag_map[start.r][start.c].ok=1;
    flag_map[start.r][start.c].visited=1;
    queue[tail_flag]=start;
    tail_flag+=1;


    while(head_flag!=tail_flag){
        tmp=queue[head_flag];
        head_flag=(head_flag+1)%(MAX_POS+2);

        up=down=left=right=tmp;
        if(up.r-1>=0){
            up.r-=1;
        }
        if(down.r+1<SIZE){
            down.r+=1;
        }
        if(left.c-1>=0){
            left.c-=1;
        }
        if(right.c+1<SIZE){
            right.c+=1;
        }

        if(flag_map[up.r][tmp.c].ok==1&&flag_map[up.r][tmp.c].visited==0){//up point
            flag_map[up.r][tmp.c].distance=flag_map[tmp.r][tmp.c].distance+1;//越早遍历到，必然distance越小，所以不必进行新distance是否比先前小的判断
            flag_map[up.r][tmp.c].visited=1;
            flag_map[up.r][tmp.c].prior=tmp;

        //printf("up\n");
            flag_map[up.r][tmp.c].owndir=0;

            // add into the queue

            queue[tail_flag]=up;

            tail_flag=(tail_flag+1)%(MAX_POS+2);
        }
        if(flag_map[down.r][tmp.c].ok==1&&flag_map[down.r][tmp.c].visited==0){//down point
            flag_map[down.r][tmp.c].distance=flag_map[tmp.r][tmp.c].distance+1;
            flag_map[down.r][tmp.c].visited=1;
            flag_map[down.r][tmp.c].prior=tmp;

          //   printf("down_r:%d c:%d\n",tmp.r,tmp.c);

            flag_map[down.r][tmp.c].owndir=0;
            // add into the queue

            queue[tail_flag]=down;

            tail_flag=(tail_flag+1)%(MAX_POS+2);
        }
        if(flag_map[tmp.r][left.c].ok==1&&flag_map[tmp.r][left.c].visited==0){//left point
            flag_map[tmp.r][left.c].distance=flag_map[tmp.r][tmp.c].distance+1;
            flag_map[tmp.r][left.c].visited=1;
            flag_map[tmp.r][left.c].prior=tmp;

        //     printf("left_r:%d c:%d\n",tmp.r,tmp.c);

            flag_map[tmp.r][left.c].owndir=0;
            // add into the queue

            queue[tail_flag]=left;

            tail_flag=(tail_flag+1)%(MAX_POS+2);
        }
        if(flag_map[tmp.r][right.c].ok==1&&flag_map[tmp.r][right.c].visited==0){//right point
            flag_map[tmp.r][right.c].distance=flag_map[tmp.r][tmp.c].distance+1;
            flag_map[tmp.r][right.c].visited=1;
            flag_map[tmp.r][right.c].prior=tmp;

        //   printf("right_r:%d c:%d\n",tmp.r,tmp.c);

            flag_map[tmp.r][right.c].owndir=0;
            // add into the queue

            queue[tail_flag]=right;

            tail_flag=(tail_flag+1)%(MAX_POS+2);
        }
    }
    shortest_path[0]=desti;//在最短路径的数组中，点是从终点到起点排列的。也就是说，如果蛇按照这条路径行进，
    i=0;                    //蛇头会在数组的[0]处；而[i]处即start点。
    while(flag_map[shortest_path[i].r][shortest_path[i].c].distance!=0){
        i++;
        shortest_path[i]=flag_map[shortest_path[i-1].r][shortest_path[i-1].c].prior;
       // printf("1111111111   \n r:%d c:%d\n",shortest_path[i].r,shortest_path[i].c);
    }
    return i;//返回start点在数组中的位置
}

//找到合适的路径，存入path[]中。path[0]是最终点，path[函数返回值]是蛇头
int smart_snake_path(point start,point desti,point path[MAX_LENGTH],int length,point body[],char map[SIZE][SIZE],point food_position)
{
    point p1[MAX_LENGTH],p2[MAX_LENGTH];
    point up,down,left,right,tmp_body[MAX_LENGTH];
    int p1_flag,p2_flag,p3_flag;
    int i,j,max;
    if(exist_path(start,desti,length,body)==1){//情况1：如果蛇到食物的路径存在，并且蛇吃到食物并增长后仍能到达蛇尾，则沿此路径（p1)前进
        p1_flag=shortest_path(start,desti,p1,length,body,map);

        for(i=0,j=p1_flag;i<length;i++){
            p1[j++]=body[i];//body[0]处的蛇头已经在pl_flag处，所以由其+1开始存整条蛇身
        }
        //虚拟小蛇的蛇身
        for(i=0;i<=length;i++){//可以等于length是因为吃到食物会增长
            tmp_body[i].r=p1[i].r;
            tmp_body[i].c=p1[i].c;
        }

        //令虚拟小蛇沿P1行进至desti
        if(exist_path(desti,tmp_body[length],length,tmp_body)==1){
            memcpy(path,p1,((p1_flag+1)*sizeof(point)));//
            return p1_flag;//返回只包含shortest_path的路径p1（p1[0]为desti，起始点p1[p1_flag]为蛇头）
        }

    }
    //(蛇吃到食物后无法到达蛇尾或蛇无法到达食物)
        if(exist_path(start,body[length-1],length,body)==1){//情况2：若存在头至尾的路径，则沿较长路径行进。长！
            length-=1;//暂时装作蛇尾不是蛇的一部分，以使shortest_path能够发挥作用
            p2_flag=shortest_path(start,body[length],p2,length,body,map);
            length+=1;//改回来
            up=down=left=right=start;
           /* printf("33333(%d,%d)\n",start.r,start.c);//
            printf("233333(%d,%d)\n",body[length-1].r,body[length-1].c);//
            printf("p2_flag:%d\n",p2_flag);
            for(i=0;i<=p2_flag;i++){
                printf("55555(%d,%d)  ",p2[i].r,p2[i].c);//
            }*/
            if(up.r-1>=0){
                up.r-=1;
            }
            if(down.r+1<SIZE){
                down.r+=1;
            }
            if(left.c-1>=0){
                left.c-=1;
            }
            if(right.c+1<SIZE){
                right.c+=1;
            }
            for(i=1;i<length;i++){
                tmp_body[i]=body[i-1];//移动1步后蛇身除了头以外的位置
            }
            if((p2[p2_flag-1].c!=up.c||p2[p2_flag-1].r!=up.r)&&moveable(up,length,body)){//向上一步
                tmp_body[0]=up;
                if(exist_path(up,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=up;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }
            }
            if((p2[p2_flag-1].c!=down.c||p2[p2_flag-1].r!=down.r)&&moveable(down,length,body)){//向下一步
                tmp_body[0]=down;
                if(exist_path(down,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=down;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }
            }
            if((p2[p2_flag-1].c!=left.c||p2[p2_flag-1].r!=left.r)&&moveable(left,length,body)){//向左一步
                tmp_body[0]=left;
                if(exist_path(left,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=left;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }

            }
            if((p2[p2_flag-1].c!=right.c||p2[p2_flag-1].r!=right.r)&&moveable(right,length,body)){//向右一步
                tmp_body[0]=right;
                if(exist_path(right,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=right;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }
            }


            //考虑到当蛇只有一条路径从头到尾时会出现bug，所以加如下
            if(moveable(up,length,body)||(up.r==body[length-1].r&&up.c==body[length-1].c)){//向上一步
                tmp_body[0]=up;
                if(exist_path(up,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=up;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }
            }
            if(moveable(down,length,body)||(down.r==body[length-1].r&&down.c==body[length-1].c)){//向下一步
                tmp_body[0]=down;
                if(exist_path(down,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=down;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }
            }
            if(moveable(left,length,body)||(left.r==body[length-1].r&&left.c==body[length-1].c)){//向左一步
                tmp_body[0]=left;
                if(exist_path(left,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=left;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }

            }
            if(moveable(right,length,body)||(right.r==body[length-1].r&&right.c==body[length-1].c)){//向右一步
                tmp_body[0]=right;
                if(exist_path(right,tmp_body[length-1],length,tmp_body)==1){
                    path[0]=right;//与上一种情况返回格式保持一致
                    path[1]=start;
                    p2_flag=1;
                    return p2_flag;
                }
            }
            else{
                //printf("case2：？？？？？？？？？？？？\n");
                return -1;
            }

        }
        else {//(蛇吃到食物后无法到达蛇尾或蛇无法到达食物)并且（不存在从蛇头到蛇尾的路径）
              //情况三： wander一下，前往离食物最远的方向
                up=down=left=right=start;
                if(up.r-1>=0){
                    up.r-=1;
                }
                if(down.r+1<SIZE){
                    down.r+=1;
                }
                if(left.c-1>=0){
                    left.c-=1;
                }
                if(right.c+1<SIZE){
                    right.c+=1;
                }
                i=food_position.c+food_position.r;
                //找到最远方向
                max=-1;
                if(abs(up.r+up.c-i)>=max&&(up.r!=start.r)){
                    max=abs(up.r+up.c-i);
                    j=1;
                }
                if(abs(down.r+down.c-i)>=max&&(down.r!=start.r)){
                    max=abs(down.r+down.c-i);
                    j=2;
                }
                if(abs(left.r+left.c-i)>=max){
                    j=3;
                    max=abs(left.r+left.c-i);
                }
                if(abs(right.r+right.c-i)>=max){
                    j=4;
                    max=abs(right.r+right.c-i);
                }
                //按照格式返回
                if(j==1){
                    path[0]=up;
                    path[1]=start;
                    p3_flag=1;
                   // printf("case:3333333333\n\n");
                    return p3_flag;
                }
                else if(j==2){
                    path[0]=down;
                    path[1]=start;
                    p3_flag=1;
                   // printf("case:3333333333\n\n");
                    return p3_flag;
                }
                else if(j==3){
                    path[0]=left;
                    path[1]=start;
                    p3_flag=1;
                  //  printf("case:3333333333\n\n");
                    return p3_flag;
                }
                else if(j==4){
                    path[0]=right;
                    path[1]=start;
                    p3_flag=1;
                 //   printf("case:3333333333\n\n");
                    return p3_flag;
                }
                else {
                    //printf("case3:??????????\n\ncase3:??????????\n\ncase3:??????????\n\ncase3:??????????\n\n");
                    return -1;
                }

        }

    return -1;//means error
}


int get_dir_of_a_smart_snake(point start,point desti,point path[MAX_LENGTH],int length,point body[],char map[SIZE][SIZE])
{
    int op=-1;
    point up,down,left,right,food_position;
    food_position=desti;
    while(1){
    if(op>=0){

        up=down=left=right=path[op+1];
        if(up.r-1>=0){
            up.r-=1;
        }
        if(down.r+1<SIZE){
            down.r+=1;
        }
        if(left.c-1>=0){
            left.c-=1;
        }
        if(right.c+1<SIZE){
            right.c+=1;
        }
        if(up.r==path[op].r&&up.c==path[op].c){
            op--;
            return 0;//up
        }
        else if(down.r==path[op].r&&down.c==path[op].c){
            op--;
            return 2;//down
        }
        else if(left.r==path[op].r&&left.c==path[op].c){
            op--;
            return 3;//left
        }
        else if(right.r==path[op].r&&right.c==path[op].c){
            op--;
            return 1;//right
        }
    }
    else {
        op=smart_snake_path(start,desti,path,length,body,map,food_position);
        if(op==-1){
            return -1;
        }
        //printf("15555555555\n");
        //printf("op:%d\n",op);
       // printf("(%d,%d)\n",path[op].r,path[op].c);
        op--;
       // printf("(%d,%d)\n",path[op].r,path[op].c);
    }
 }
 return -1;
}
